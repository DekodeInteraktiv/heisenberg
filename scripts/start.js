'use strict';

/**
 * Do this as the first thing so that any code reading it knows the right env.
 */
process.env.NODE_ENV = 'development';

/**
 * Makes the script crash on unhandled rejections instead of silently
 * ignoring them.
 */
process.on( 'unhandledRejection', err => {
	throw err;
});

/**
 * External dependencies
 */
const _ = require( 'lodash' );
const validator = require( 'validator' );
const WebpackDevServer = require( 'webpack-dev-server' );

/**
 * Internal dependencies
 */
const paths = require( '../config/paths' );

/**
 * Variables
 */
const chalk = require( 'chalk' );
const clearConsole = require( 'react-dev-utils/clearConsole' );
const config = require( '../config/webpack.config.dev' );
const createWebpackCompiler = require( './utils/create-webpack-compiler' );
const devServerConfig = require( '../config/webpackDevServer.config' );

const isInteractive = process.stdout.isTTY;
const proxy = _.trim( require( paths.appPackageJson ).proxy );

/**
 * Check if proxy url is valid
 */
if ( ! proxy ) {
	console.log();
	console.log( chalk.red( '`proxy` field is not defined in your `package.json`' ) );
	console.log();
	console.log( 'See https://github.com/DekodeInteraktiv/heisenberg#proxy' );
	console.log();
	process.exit( 1 );
}

if ( validator.isURL( proxy, { require_protocol: true } ) ) {
	console.log();
	console.log( chalk.red( 'The proxy is not a valid url' ) );
	console.log();
	process.exit( 1 );
}

/**
 * Create a webpack compiler that is configured with custom messages.
 */
const compiler = createWebpackCompiler(
	config,
	function onReady( showInstructions ) {
		if ( ! showInstructions ) {
			return;
		}

		console.log();
		console.log( 'The site is running at:' );
		console.log();
		console.log( `  ${chalk.cyan( 'http://localhost:3000/' )}  ${chalk.dim( `(${proxy})` )}` );
		console.log();
		console.log( 'Note that the development build is not optimized.' );
		console.log(
			`To create a production build, use ${chalk.cyan( 'yarn build' )}.`
		);
		console.log();
	}
);

// Serve webpack assets generated by the compiler over a web sever.
const devServer = new WebpackDevServer( compiler, devServerConfig );

// Launch WebpackDevServer.
devServer.listen( 3100, 'localhost', err => {
	if ( err ) {
		return console.log( err );
	}

	if ( isInteractive ) {
		clearConsole();
	}

	console.log( chalk.cyan( 'Starting the development server...' ) );
	console.log();
});
